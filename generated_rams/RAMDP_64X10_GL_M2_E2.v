//-----------------------------------------------------------------------------
// DFF-based synthesizable wrapper for RAMDP_64X10_GL_M2_E2.v
// Automatically generated by generate_behavioral_rams.py
//----------------------------------------------------------------------------- 
module RAMDP_64X10_GL_M2_E2 (
  // retention / power pins
  input        IDDQ,
  inout  wire  SVOP_0, SVOP_1, SVOP_2, SVOP_3,
              SVOP_4, SVOP_5, SVOP_6, SVOP_7,
  // sleep-mode enables
  input        SLEEP_EN_0, SLEEP_EN_1, SLEEP_EN_2, SLEEP_EN_3,
               SLEEP_EN_4, SLEEP_EN_5, SLEEP_EN_6, SLEEP_EN_7,
  input        RET_EN,

  // clocks
  input        CLK,
  input        CLK_R,
  input        CLK_W,

  // read/write enables
  input        RE,
  input        WE,

  // read address bits
  input  wire  RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0,
  // write address bits
  input  wire  WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0,

  // write data bits
  input  wire  WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0,
  // read data bits
  output reg   RD_9, RD_8, RD_7, RD_6, RD_5, RD_4, RD_3, RD_2, RD_1, RD_0
);

  // Derived parameters
  localparam DEPTH      = 64;
  localparam WIDTH      = 10;
  localparam ADDR_WIDTH = $clog2(DEPTH);

  // buses
  wire [ADDR_WIDTH-1:0] RA     = {RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0};
  wire [ADDR_WIDTH-1:0] WA     = {WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0};
  wire [WIDTH-1:0]      WD_bus = {WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0};
  reg  [WIDTH-1:0]      RD_bus;

  // memory array
  reg [WIDTH-1:0] mem [0:DEPTH-1];

  // write port (uses CLK_W)
  always @(posedge CLK_W) begin
    if (WE) mem[WA] <= WD_bus;
  end

  // read port (uses CLK_R)
  always @(posedge CLK_R) begin
    if (RE) RD_bus <= mem[RA];
  end

  // drive outputs
  assign {RD_9, RD_8, RD_7, RD_6, RD_5, RD_4, RD_3, RD_2, RD_1, RD_0} = RD_bus;

endmodule
